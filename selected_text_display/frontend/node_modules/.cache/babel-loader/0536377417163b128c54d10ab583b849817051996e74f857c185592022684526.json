{"ast":null,"code":"var _jsxFileName = \"/Users/celenap/selected_text_display/selected_text_display/frontend/src/SelectedTextDisplay.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SelectedTextDisplay extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedText: \"\",\n      textColor: \"#000000\",\n      allSelectedWords: ['']\n    };\n    this.render = () => {\n      var placeholder;\n      const txt = this.props.args[\"txt\"];\n      const {\n        textColor\n      } = this.state;\n      const words = txt.split(' ');\n      const textWithSpans = words.map((word, index) => {\n        const selected = this.state.selectedText;\n        this.state.allSelectedWords.push(this.state.selectedText);\n        const wordnopunc = word.replace(/[^\\w\\s']/g, '');\n        const borderColor = this.state.allSelectedWords.includes(wordnopunc) ? \"label label-warning\" : \"\";\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: borderColor,\n          children: [word, ' ']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this);\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: textWithSpans\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.displaySelectedText,\n          children: \"Select Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this);\n    };\n    this.getSelectedText = () => {\n      var _window$getSelection;\n      const text = ((_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.toString()) || \"\";\n      return text;\n    };\n    this.displaySelectedText = () => {\n      const text = this.getSelectedText();\n      this.setState(() => ({\n        selectedText: `${text}`\n      }), () => {\n        const newColor = this.state.textColor === \"initial-color\" ? \"new-color\" : \"initial-color\";\n        this.setState({\n          textColor: \"#AA4A44\"\n        });\n        Streamlit.setComponentValue(this.state.selectedText);\n      });\n    };\n  }\n}\nexport default _c = withStreamlitConnection(SelectedTextDisplay);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","SelectedTextDisplay","constructor","args","state","selectedText","textColor","allSelectedWords","render","placeholder","txt","props","words","split","textWithSpans","map","word","index","selected","push","wordnopunc","replace","borderColor","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","displaySelectedText","getSelectedText","_window$getSelection","text","window","getSelection","toString","setState","newColor","setComponentValue","_c","$RefreshReg$"],"sources":["/Users/celenap/selected_text_display/selected_text_display/frontend/src/SelectedTextDisplay.tsx"],"sourcesContent":["import { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport CSS from 'csstype';\n\ninterface State {\n  selectedText: string;\n  textColor: string;\n  allSelectedWords: string[];\n}\n\n\nclass SelectedTextDisplay extends StreamlitComponentBase<State> {\n  public state = { selectedText: \"\", textColor: \"#000000\", allSelectedWords: ['']};\n\n  public render = (): ReactNode => {\n    var placeholder;\n    const txt = this.props.args[\"txt\"]\n    const {textColor} = this.state;\n    const words = txt.split(' ');\n    const textWithSpans = words.map((word: string, index: number) => {\n      const selected = this.state.selectedText;\n      this.state.allSelectedWords.push(this.state.selectedText);\n      const wordnopunc = word.replace(/[^\\w\\s']/g, '');\n      const borderColor = this.state.allSelectedWords.includes(wordnopunc) ? \"label label-warning\" : \"\";   \n      return (\n        <span key={index} className={borderColor}>\n          {word}{' '}\n        </span>\n      );\n    });\n    return (\n      <div>\n        <h3><p>{textWithSpans}</p></h3>\n        <button onClick={this.displaySelectedText}>Select Text</button>\n      </div>\n    );\n  };\n\n  private getSelectedText = (): string => {\n    const text = window.getSelection()?.toString() || \"\";\n    return text;\n  };\n\n  private displaySelectedText = (): void => {\n    const text = this.getSelectedText();\n    this.setState(\n      () => ({ selectedText: `${text}` }), \n      () => {\n        const newColor = this.state.textColor  === \"initial-color\" ? \"new-color\" : \"initial-color\";\n        this.setState({textColor: \"#AA4A44\"});\n        Streamlit.setComponentValue(this.state.selectedText);\n      }\n    );\n  };\n}\n\nexport default withStreamlitConnection(SelectedTextDisplay)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}